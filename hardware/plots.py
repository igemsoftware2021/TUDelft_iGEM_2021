import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator
from scipy.optimize import curve_fit

# Plot helpers


def custom_aptavita_colors():
    """Returns custom AptaVita color scheme"""
    return ["#9B0138", "#057D54", "#FFCE3A", "#EDB4D7", "#4FD590", "#4D94EF", "#EFA54D", "#313175",
            "#667817", "#6FC0A8", "#D6682A", "#F3758A", "#755F26", "#A74D36", "#C88E99", "#A79536"]


def plot_ambient_light_different_conditions(save_path: str = None):
    """The plot with the normalized transmitted length for different light conditions"""
    # Data (structure [value sensor 1, value sensor 2, value sensor 3, value sensor 4])
    # Pure sensor values
    # mean_condition1 = np.array([393.4, 404.4, 398.9, 434.4])
    # mean_condition2 = np.array([82, 80.7, 91, 82.0])
    # mean_condition3 = np.array([6, 3, 4, 5])
    # mean_condition4 = np.array([0, 0, 0, 0])

    # sem_condition1 = np.array([0.0971, 0.163, 0.131, 0.223])
    # sem_condition2 = np.array([0, 0.0586, 0, 0.0277])
    # sem_condition3 = np.array([0, 0, 0, 0])
    # sem_condition4 = np.array([0, 0, 0, 0])

    # Transmitted light normalization
    mean_condition1 = np.array([100, 100, 100, 100])
    mean_condition2 = np.array([20.84, 19.96, 22.82, 18.87])
    mean_condition3 = np.array([7.317, 3.717, 4.396, 6.101])
    mean_condition4 = np.array([0, 0, 0, 0])

    conf_sem_condition1 = np.array([0.0967, 0.119, 0.0970, 0.152])
    conf_sem_condition2 = np.array([0.01, 0.0442, 0.0147, 0.0315])
    conf_sem_condition3 = np.array([0.00354, 0.00293, 0.00283, 0.00614])
    conf_sem_condition4 = np.array([0, 0, 0, 0])

    custom_colors = custom_aptavita_colors()

    fig1, ax1 = plt.subplots(figsize=(12, 6), dpi=150)

    # Position of bars on x-axis
    ind = np.arange(mean_condition1.shape[0])

    # Width of a bar
    width = 0.20

    ax1.bar(ind-1.5*width, mean_condition1, width,
            color=custom_colors[0], label="Condition 1")
    ax1.bar(ind-0.5*width, mean_condition2, width,
            color=custom_colors[1], label="Condition 2")
    ax1.bar(ind+0.5*width, mean_condition3, width,
            color=custom_colors[2], label="Condition 3")
    ax1.bar(ind+1.5*width, mean_condition4, width,
            color=custom_colors[3], label="Condition 4")

    # Set all proporties for ax1
    ax1.legend()
    ax1.set_xticks(np.arange(0, 4))
    ax1.set_xticklabels(["Sensor 1", "Sensor 2", "Sensor 3", "Sensor 4"])
    # ax1.set_yscale("log")
    ax1.set_ylabel("Transmitted light (%)")

    ax1.yaxis.set_major_locator(MultipleLocator(10))
    ax1.yaxis.set_minor_locator(MultipleLocator(5))

    if save_path is not None:
        fig1.savefig(f"{save_path}", format="svg", dpi=1200)
    else:
        plt.show()


def absorbance_spectrum_food_colorant(save_path: str = None):
    """Plots absorbance spectrum of the food colorant."""
    wavelength = np.array([300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630,
                          640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000])
    absorbance = np.array([1.237300038, 1.203600049, 1.036299944, 0.6395999789, 0.3312999904, 0.244599998, 0.2535000145, 0.3095000088, 0.4287, 0.5939000249, 0.7129999995, 0.9079999924, 0.8080000281, 0.4555000067, 0.181400001, 0.0903000012, 0.07079999894, 0.07079999894, 0.07859999686, 0.09089999646, 0.1116999984, 0.1460999995, 0.1965000033, 0.2802999914, 0.4092999995, 0.5819000006, 0.8377000093, 1.20630002, 1.74000001, 2.361299992, 2.769500017, 3.173199892, 3.296099901, 3.650399923, 3.471400023, 3.382100105,
                          2.788899899, 1.676300049, 0.8014000058, 0.3761999905, 0.1768999994, 0.09860000014, 0.06849999726, 0.05469999835, 0.04850000143, 0.04600000009, 0.04450000077, 0.04369999841, 0.04300000146, 0.0428000018, 0.04239999875, 0.04230000079, 0.04250000045, 0.04230000079, 0.04210000113, 0.04210000113, 0.04259999841, 0.0447999984, 0.0449000001, 0.04300000146, 0.04259999841, 0.04300000146, 0.04390000179, 0.04410000145, 0.04390000179, 0.0438000001, 0.04399999976, 0.04450000077, 0.04580000043, 0.04569999874, 0.04580000043])
    absorbance_norm = absorbance / np.amax(absorbance)

    fig1, ax1 = plt.subplots(figsize=(10, 5), dpi=150)
    ax1.plot(wavelength, absorbance_norm, color="#9B0138")
    ax1.set_xlabel("Wavelength [nM]")
    ax1.set_ylabel("Absorbance")

    ax1_ylim = ax1.get_ylim()
    ax1.set_ylim((0, ax1_ylim[1]))

    ax1.xaxis.set_major_locator(MultipleLocator(50))
    ax1.xaxis.set_minor_locator(MultipleLocator(10))

    ax1.yaxis.set_major_locator(MultipleLocator(0.1))
    ax1.yaxis.set_minor_locator(MultipleLocator(0.01))

    if save_path is not None:
        fig1.savefig(f"{save_path}", format="svg", dpi=1200)
    else:
        plt.show()


def plot_absorbance_spectrum_cpr(save_path: str = None):
    """Plots the absorbance spectrum of the CPR at a pH of 7.4"""
    wavelength = np.array([300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
                          649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000])
    absorbance = np.array([2.022000074, 1.976799965, 1.967700005, 1.949499965, 1.933300018, 1.92809999, 1.907199979, 1.890100002, 1.870800018, 1.852599978, 1.833699942, 1.827100039, 1.815000057, 1.795099974, 1.777999997, 1.7579, 1.780099988, 1.763499975, 1.744300008, 1.738000035, 1.727499962, 1.710700035, 1.708600044, 1.691900015, 1.684100032, 1.679800034, 1.675199986, 1.664700031, 1.663800001, 1.656599998, 1.657099962, 1.65199995, 1.648000002, 1.649600029, 1.644099951, 1.642099977, 1.641199946, 1.632400036, 1.634299994, 1.643300056, 1.634899974, 1.631700039, 1.637899995, 1.630900025, 1.63380003, 1.632500052, 1.631199956, 1.631899953, 1.632500052, 1.629600048, 1.634899974, 1.627900004, 1.635499954, 1.642500043, 1.638100028, 1.639099956, 1.639700055, 1.637699962, 1.641800046, 1.640200019, 1.641600013, 1.641100049, 1.643700004, 1.646700025, 1.645300031, 1.64320004, 1.646000028, 1.645499945, 1.648699999, 1.648200035, 1.647899985, 1.646100044, 1.649799943, 1.643599987, 1.646600008, 1.634899974, 1.640699983, 1.639799953, 1.636100054, 1.628100038, 1.626600027, 1.628999949, 1.619699955, 1.61590004, 1.611799955, 1.605599999, 1.605000019, 1.593099952, 1.593999982, 1.585500002, 1.579100013, 1.58039999, 1.567199945, 1.565999985, 1.557800055, 1.557999969, 1.548400044, 1.546800017, 1.541399956, 1.540400028, 1.535699964, 1.531999946, 1.526900053, 1.526100039, 1.526800036, 1.525200009, 1.519999981, 1.520799994, 1.522899985, 1.521100044, 1.515200019, 1.519299984, 1.519600034, 1.51849997, 1.519600034, 1.516199946, 1.514899969, 1.511999965, 1.517099977, 1.518100023, 1.519799948, 1.520099998, 1.519400001, 1.520599961, 1.521499991, 1.521399975, 1.523499966, 1.525300026, 1.52639997, 1.523900032, 1.526000023, 1.523300052, 1.527899981, 1.530599952, 1.529199958, 1.531800032, 1.530699968, 1.530099988, 1.533599973, 1.535899997, 1.534999967, 1.53760004, 1.536200047, 1.536399961, 1.536299944, 1.539700031, 1.541700006, 1.541399956, 1.54489994, 1.543200016, 1.548200011, 1.542899966, 1.544800043, 1.549299955, 1.545699954, 1.550500035, 1.551599979, 1.551200032, 1.552000046, 1.556800008, 1.557000041, 1.559499979, 1.558899999, 1.561200023, 1.558599949, 1.561800003, 1.566900015, 1.566400051, 1.565700054, 1.569399953, 1.574100018, 1.57249999, 1.574399948, 1.575299978, 1.577800035, 1.57949996, 1.583600044, 1.583799958, 1.584300041, 1.590899944, 1.591099977, 1.595299959, 1.5977, 1.594900012, 1.598500013, 1.610499978, 1.607599974, 1.608500004, 1.609200001, 1.61500001, 1.618299961, 1.62440002, 1.62469995, 1.628600001, 1.632099986, 1.634899974, 1.639799953, 1.642699957, 1.647400022, 1.654899955, 1.654899955, 1.66079998, 1.666800022, 1.668799996, 1.674399972, 1.674700022, 1.681499958, 1.685600042, 1.68780005, 1.69690001, 1.701200008, 1.707800031, 1.71420002, 1.726999998, 1.722900033, 1.730000019, 1.737300038, 1.74000001, 1.748999953, 1.761199951, 1.761600018, 1.769299984, 1.776800036, 1.781299949, 1.788300037, 1.79400003, 1.807199955, 1.807700038, 1.820000052, 1.82099998, 1.833299994, 1.830800056, 1.839100003, 1.848199964, 1.854900002, 1.860499978, 1.878200054, 1.876600027, 1.886100054, 1.891499996, 1.897500038, 1.9023, 1.909999967, 1.915699959, 1.919399977, 1.929299951, 1.935299993, 1.941499949, 1.951099992, 1.960399985, 1.963500023, 1.97510004, 1.975600004, 1.99150002, 2.000499964, 2.011499882, 2.016900063, 2.027800083, 2.020400047, 2.050600052, 2.053200006, 2.062700033, 2.081199884, 2.07949996, 2.103600025, 2.113699913, 2.14260006, 2.151499987, 2.142299891, 2.155299902, 2.166100025, 2.172199965, 2.183300018, 2.196799994, 2.194200039, 2.190000057, 2.203399897, 2.20720005, 2.199899912, 2.215899944, 2.181200027, 2.18569994, 2.169199944, 2.169100046, 2.148299932, 2.136699915, 2.116100073, 2.095999956, 2.082600117, 2.042099953, 2.02579999, 2.00970006, 1.979099989, 1.960399985, 1.907699943, 1.890400052, 1.871000051, 1.845399976, 1.819499969, 1.793200016, 1.775200009, 1.747799993, 1.717900038, 1.686699986, 1.669999957, 1.654899955, 1.640900016, 1.623000026, 1.600499988, 1.585500002, 1.572299957, 1.557700038, 1.540799975, 1.530599952, 1.522199988, 1.507099986, 1.496500015, 1.488000035, 1.479699969, 1.472800016, 1.465600014, 1.460600019, 1.451500058, 1.444499969, 1.439599991, 1.433500051, 1.429100037, 1.424499989, 1.421399951, 1.419399977, 1.417299986, 1.414299965, 1.413900018, 1.410899997, 1.407299995, 1.406100035, 1.404899955, 1.405699968, 1.403599977, 1.40139997, 1.400300026, 1.398000002, 1.398699999, 1.397899985, 1.394299984, 1.396399975, 1.394099951, 1.394799948, 1.39199996,
                          1.39320004, 1.392799973, 1.391499996, 1.389500022, 1.391199946, 1.390699983, 1.390499949, 1.389799953, 1.390200019, 1.388499975, 1.387500048, 1.388800025, 1.389000058, 1.387500048, 1.386800051, 1.386299968, 1.387400031, 1.385499954, 1.387099981, 1.386199951, 1.387500048, 1.384600043, 1.385900021, 1.384699941, 1.381600022, 1.383700013, 1.383299947, 1.384899974, 1.383299947, 1.383000016, 1.38259995, 1.379899979, 1.382099986, 1.382799983, 1.381899953, 1.380200028, 1.380300045, 1.381600022, 1.379899979, 1.380100012, 1.380699992, 1.377300024, 1.378200054, 1.379099965, 1.378800035, 1.379299998, 1.379199982, 1.377799988, 1.377900004, 1.376999974, 1.378800035, 1.376099944, 1.377099991, 1.376099944, 1.374799967, 1.378000021, 1.376099944, 1.376199961, 1.374799967, 1.376700044, 1.376000047, 1.375200033, 1.374600053, 1.37559998, 1.375699997, 1.37590003, 1.372400045, 1.373999953, 1.372300029, 1.37409997, 1.373299956, 1.372400045, 1.372400045, 1.372099996, 1.373399973, 1.371399999, 1.372499943, 1.370300055, 1.372699976, 1.370499969, 1.371199965, 1.371999979, 1.370599985, 1.371299982, 1.371099949, 1.370100021, 1.368399978, 1.370700002, 1.370399952, 1.369199991, 1.368899941, 1.368999958, 1.369300008, 1.368600011, 1.367900014, 1.367900014, 1.3671, 1.368299961, 1.366000056, 1.368000031, 1.366999984, 1.367300034, 1.368100047, 1.36740005, 1.366099954, 1.366099954, 1.36650002, 1.36500001, 1.365700006, 1.36590004, 1.36619997, 1.365300059, 1.365700006, 1.364300013, 1.363999963, 1.36500001, 1.364899993, 1.364300013, 1.363999963, 1.362400055, 1.363700032, 1.363399982, 1.362800002, 1.362599969, 1.361999989, 1.361400008, 1.361199975, 1.361400008, 1.361999989, 1.361400008, 1.361700058, 1.361199975, 1.360000014, 1.359300017, 1.359500051, 1.359799981, 1.359799981, 1.360399961, 1.35800004, 1.360700011, 1.359599948, 1.358999968, 1.358800054, 1.359300017, 1.356999993, 1.359699965, 1.358299971, 1.357300043, 1.356899977, 1.357200027, 1.35800004, 1.356299996, 1.35679996, 1.357499957, 1.357300043, 1.356699944, 1.358700037, 1.355700016, 1.35619998, 1.35619998, 1.355100036, 1.354799986, 1.355700016, 1.355900049, 1.354900002, 1.355700016, 1.354500055, 1.354599953, 1.352399945, 1.353500009, 1.353600025, 1.351899981, 1.353099942, 1.353999972, 1.356400013, 1.353600025, 1.354400039, 1.356099963, 1.355000019, 1.353800058, 1.351999998, 1.353600025, 1.352300048, 1.353000045, 1.352399945, 1.351699948, 1.352800012, 1.352699995, 1.350999951, 1.352599978, 1.351999998, 1.351099968, 1.351699948, 1.350399971, 1.349699974, 1.348399997, 1.34860003, 1.35010004, 1.349699974, 1.350399971, 1.349599957, 1.348799944, 1.349300027, 1.347499967, 1.349400043, 1.34829998, 1.348700047, 1.345499992, 1.34800005, 1.347000003, 1.347900033, 1.3477, 1.347100019, 1.346500039, 1.347200036, 1.347100019, 1.346899986, 1.3477, 1.34739995, 1.347100019, 1.348099947, 1.3477, 1.346699953, 1.346600056, 1.347800016, 1.347300053, 1.347499967, 1.347599983, 1.347599983, 1.345700026, 1.345600009, 1.345700026, 1.345399976, 1.345299959, 1.346699953, 1.344900012, 1.346199989, 1.345900059, 1.345700026, 1.343400002, 1.342499971, 1.343299985, 1.341300011, 1.340299964, 1.3398, 1.340000033, 1.340299964, 1.338600039, 1.341500044, 1.340899944, 1.340999961, 1.34070003, 1.34010005, 1.339699984, 1.337700009, 1.339699984, 1.33949995, 1.33920002, 1.339100003, 1.33889997, 1.33829999, 1.338799953, 1.336599946, 1.337700009, 1.334699988, 1.335999966, 1.336599946, 1.336699963, 1.33739996, 1.337000012, 1.336400032, 1.33889997, 1.338099957, 1.337700009, 1.337200046, 1.337100029, 1.336599946, 1.335999966, 1.335899949, 1.335700035, 1.334499955, 1.334699988, 1.334900022, 1.335000038, 1.334499955, 1.333799958, 1.332999945, 1.333400011, 1.333699942, 1.332999945, 1.333500028, 1.333999991, 1.333099961, 1.333699942, 1.332800031, 1.331599951, 1.332000017, 1.331200004, 1.331699967, 1.331400037, 1.331599951, 1.331500053, 1.331400037, 1.330500007, 1.331200004, 1.330899954, 1.33130002, 1.331699967, 1.331099987, 1.330800056, 1.330199957, 1.331099987, 1.33070004, 1.32949996, 1.330299973, 1.328699946, 1.33070004, 1.328799963, 1.328400016, 1.328199983, 1.329200029, 1.329300046, 1.328500032, 1.32889998, 1.329100013, 1.328699946, 1.328299999, 1.328099966, 1.327800035, 1.328400016, 1.327399969, 1.329399943, 1.327800035, 1.328799963, 1.329699993, 1.328999996, 1.328199983, 1.325099945, 1.325399995, 1.325399995, 1.324300051, 1.324699998, 1.324599981, 1.324300051, 1.327000022, 1.325899959, 1.325600028, 1.324699998, 1.326799989, 1.325500011, 1.322700024, 1.322600007])
    absorbance_blanco = np.array([1.757300019, 1.723799944, 1.705199957, 1.687600017, 1.668799996, 1.662500024, 1.648000002, 1.640200019, 1.632699966, 1.619500041, 1.610700011, 1.611199975, 1.606400013, 1.601400018, 1.5898, 1.58130002, 1.594200015, 1.587200046, 1.58220005, 1.574300051, 1.576200008, 1.57159996, 1.569000006, 1.560500026, 1.557700038, 1.556300044, 1.552600026, 1.549100041, 1.546300054, 1.542700052, 1.541399956, 1.538300037, 1.533800006, 1.530799985, 1.527899981, 1.526299953, 1.525099993, 1.523399949, 1.515900016, 1.520499945, 1.512599945, 1.50940001, 1.510499954, 1.501099944, 1.504500031, 1.501600027, 1.499899983, 1.501099944, 1.495900035, 1.494699955, 1.4921, 1.49090004, 1.489400029, 1.493299961, 1.486799955, 1.486700058, 1.48210001, 1.476899981, 1.480000019, 1.479599953, 1.476400018, 1.472599983, 1.472900033, 1.477399945, 1.473199964, 1.469900012, 1.469699979, 1.469599962, 1.468899965, 1.467700005, 1.465600014, 1.465899944, 1.465600014, 1.460899949, 1.461899996, 1.456599951, 1.458699942, 1.458899975, 1.454300046, 1.454399943, 1.453999996, 1.456900001, 1.45389998, 1.449699998, 1.451099992, 1.446699977, 1.448199987, 1.445600033, 1.449399948, 1.444300056, 1.447299957, 1.445299983, 1.441599965, 1.444000006, 1.444200039, 1.443300009, 1.441400051, 1.444399953, 1.442399979, 1.438899994, 1.440899968, 1.441100001, 1.436400056, 1.439200044, 1.441699982, 1.438300014, 1.436499953, 1.435500026, 1.43809998, 1.43840003, 1.434200048, 1.43659997, 1.435799956, 1.435299993, 1.437399983, 1.433400035, 1.432700038, 1.432100058, 1.432000041, 1.432899952, 1.434900045, 1.431399941, 1.433099985, 1.431900024, 1.430199981, 1.431499958, 1.429299951, 1.432999969, 1.431399941, 1.42900002, 1.430199981, 1.429100037, 1.429700017, 1.427999973, 1.429100037, 1.430299997, 1.426800013, 1.424100041, 1.427999973, 1.428599954, 1.424100041, 1.427000046, 1.426800013, 1.427600026, 1.424000025, 1.425999999, 1.424900055, 1.423300028, 1.425999999, 1.424800038, 1.426200032, 1.423499942, 1.425300002, 1.423300028, 1.422999978, 1.423400044, 1.424000025, 1.421700001, 1.420899987, 1.42019999, 1.422600031, 1.424100041, 1.422299981, 1.425400019, 1.42110002, 1.419100046, 1.421300054, 1.421700001, 1.419499993, 1.421200037, 1.420699954, 1.421399951, 1.420300007, 1.418300033, 1.419199944, 1.417500019, 1.42019999, 1.418799996, 1.415599942, 1.418099999, 1.41900003, 1.414199948, 1.415099978, 1.414399981, 1.414999962, 1.418599963, 1.415500045, 1.416499972, 1.414199948, 1.415500045, 1.413699985, 1.417899966, 1.414600015, 1.415400028, 1.415400028, 1.415400028, 1.413200021, 1.414600015, 1.413599968, 1.414499998, 1.413900018, 1.413699985, 1.413100004, 1.412500024, 1.413100004, 1.412400007, 1.411299944, 1.411599994, 1.409000039, 1.411999941, 1.41079998, 1.411800027, 1.410099983, 1.413100004, 1.410699964, 1.41079998, 1.409399986, 1.408599973, 1.410599947, 1.41050005, 1.408800006, 1.408499956, 1.40989995, 1.407199979, 1.408699989, 1.408200026, 1.407199979, 1.405400038, 1.406700015, 1.405900002, 1.408300042, 1.405300021, 1.406700015, 1.406800032, 1.406299949, 1.404099941, 1.407400012, 1.406700015, 1.405699968, 1.403300047, 1.402999997, 1.402799964, 1.403599977, 1.404199958, 1.404500008, 1.40320003, 1.403300047, 1.405099988, 1.403599977, 1.403699994, 1.402899981, 1.404399991, 1.402799964, 1.404999971, 1.402699947, 1.401499987, 1.403699994, 1.402799964, 1.400400043, 1.402199984, 1.401299953, 1.401200056, 1.399399996, 1.396700025, 1.401100039, 1.397899985, 1.401000023, 1.401299953, 1.398800015, 1.401100039, 1.398699999, 1.399799943, 1.398599982, 1.398000002, 1.397300005, 1.397699952, 1.398000002, 1.399099946, 1.397699952, 1.398699999, 1.395099998, 1.397099972, 1.395200014, 1.394099951, 1.395400047, 1.395499945, 1.396000028, 1.395099998, 1.397799969, 1.393399954, 1.396000028, 1.395400047, 1.396299958, 1.395200014, 1.394799948, 1.395099998, 1.395200014, 1.395200014, 1.392199993, 1.39289999, 1.391800046, 1.392199993, 1.390900016, 1.391299963, 1.389899969, 1.390799999, 1.39139998, 1.390699983, 1.391899943, 1.390100002, 1.390100002, 1.390499949, 1.389799953, 1.390200019, 1.390599966, 1.388900042, 1.389199972, 1.391000032, 1.388200045, 1.389000058, 1.388200045, 1.390699983, 1.388800025, 1.387099981, 1.385499954, 1.389799953, 1.385599971, 1.38440001, 1.385699987, 1.386299968, 1.386800051, 1.385200024, 1.386600018, 1.384699941, 1.384899974, 1.386500001, 1.38530004, 1.385900021, 1.385400057, 1.385699987, 1.38380003, 1.383100033, 1.383900046, 1.383599997, 1.3829, 1.384500027, 1.38380003, 1.382300019, 1.382099986, 1.381500006,
                                 1.383599997, 1.382500052, 1.381600022, 1.382400036, 1.380699992, 1.380699992, 1.380100012, 1.380100012, 1.378700018, 1.379299998, 1.378200054, 1.381299973, 1.378700018, 1.378800035, 1.380300045, 1.379199982, 1.376899958, 1.378499985, 1.377300024, 1.378999949, 1.376399994, 1.376999974, 1.377099991, 1.374600053, 1.376999974, 1.376999974, 1.376899958, 1.374300003, 1.37469995, 1.37440002, 1.372900009, 1.37559998, 1.37440002, 1.373900056, 1.37440002, 1.37409997, 1.374199986, 1.372499943, 1.372799993, 1.372799993, 1.371000051, 1.371700048, 1.372300029, 1.370700002, 1.371199965, 1.371700048, 1.371500015, 1.369300008, 1.369300008, 1.370700002, 1.368399978, 1.368499994, 1.369699955, 1.368899941, 1.369099975, 1.369899988, 1.367499948, 1.367300034, 1.369199991, 1.368199944, 1.367499948, 1.36619997, 1.367499948, 1.367200017, 1.367200017, 1.365499973, 1.36559999, 1.366400003, 1.366400003, 1.364400029, 1.364899993, 1.365700006, 1.365300059, 1.365800023, 1.365100026, 1.363999963, 1.363999963, 1.365300059, 1.361799955, 1.363600016, 1.363399982, 1.362900019, 1.362699986, 1.363700032, 1.363999963, 1.361099958, 1.362900019, 1.363000035, 1.361700058, 1.361799955, 1.361999989, 1.361199975, 1.360100031, 1.360000014, 1.360900044, 1.360399961, 1.360200047, 1.358999968, 1.360299945, 1.359899998, 1.359799981, 1.359200001, 1.358399987, 1.35860002, 1.359300017, 1.357900023, 1.357599974, 1.357900023, 1.357200027, 1.358500004, 1.356899977, 1.35650003, 1.356699944, 1.35769999, 1.356999993, 1.357300043, 1.356600046, 1.356600046, 1.356400013, 1.355200052, 1.355900049, 1.355200052, 1.355599999, 1.354099989, 1.353199959, 1.354799986, 1.352800012, 1.353099942, 1.352399945, 1.354200006, 1.352499962, 1.352699995, 1.352599978, 1.351999998, 1.352800012, 1.351899981, 1.351699948, 1.350499988, 1.352100015, 1.351999998, 1.351699948, 1.350200057, 1.350200057, 1.350700021, 1.351400018, 1.350700021, 1.349400043, 1.348500013, 1.350000024, 1.350700021, 1.350399971, 1.349699974, 1.350399971, 1.348799944, 1.34679997, 1.34829998, 1.34800005, 1.348399997, 1.348199964, 1.345900059, 1.3477, 1.34800005, 1.347800016, 1.346600056, 1.348199964, 1.345399976, 1.345999956, 1.345000029, 1.345000029, 1.345199943, 1.345199943, 1.343500018, 1.345999956, 1.345299959, 1.346099973, 1.346199989, 1.344900012, 1.347100019, 1.34679997, 1.343899965, 1.345199943, 1.345299959, 1.345499992, 1.343700051, 1.342300057, 1.343899965, 1.343700051, 1.343000054, 1.344599962, 1.344300032, 1.343500018, 1.343199968, 1.342399955, 1.341699958, 1.340899944, 1.340399981, 1.343000054, 1.342200041, 1.341599941, 1.340999961, 1.340600014, 1.340600014, 1.339699984, 1.339599967, 1.341099977, 1.340199947, 1.338099957, 1.338000059, 1.337700009, 1.339400053, 1.338099957, 1.337599993, 1.33920002, 1.340000033, 1.338500023, 1.33829999, 1.337800026, 1.338199973, 1.339400053, 1.338999987, 1.339400053, 1.338500023, 1.33829999, 1.33920002, 1.339699984, 1.337599993, 1.338600039, 1.337900043, 1.337800026, 1.336799979, 1.335999966, 1.336799979, 1.336699963, 1.338700056, 1.336799979, 1.338000059, 1.338799953, 1.338099957, 1.335999966, 1.333799958, 1.334900022, 1.332999945, 1.333699942, 1.331400037, 1.331200004, 1.33220005, 1.331699967, 1.333999991, 1.332700014, 1.332700014, 1.332800031, 1.331099987, 1.331599951, 1.328299999, 1.331200004, 1.330500007, 1.33039999, 1.331599951, 1.331099987, 1.33099997, 1.329699993, 1.33010006, 1.329599977, 1.327600002, 1.328500032, 1.327499986, 1.328099966, 1.328400016, 1.329699993, 1.328999996, 1.332000017, 1.33039999, 1.330000043, 1.329300046, 1.328999996, 1.328099966, 1.327499986, 1.327499986, 1.327200055, 1.326599956, 1.326900005, 1.326099992, 1.326500058, 1.325999975, 1.326200008, 1.325399995, 1.324599981, 1.325000048, 1.324300051, 1.324599981, 1.324599981, 1.325000048, 1.324000001, 1.324599981, 1.324100018, 1.323400021, 1.323600054, 1.323699951, 1.324000001, 1.322900057, 1.323400021, 1.32280004, 1.321799994, 1.322900057, 1.323400021, 1.324699998, 1.323699951, 1.324100018, 1.322999954, 1.322700024, 1.322900057, 1.323199987, 1.321499944, 1.32130003, 1.32190001, 1.32249999, 1.320199966, 1.320799947, 1.319900036, 1.319700003, 1.320199966, 1.319800019, 1.320799947, 1.319700003, 1.32009995, 1.320199966, 1.320799947, 1.318199992, 1.318799973, 1.318899989, 1.320500016, 1.318400025, 1.319399953, 1.32009995, 1.321400046, 1.319100022, 1.317999959, 1.316599965, 1.317000031, 1.316499949, 1.315199971, 1.315000057, 1.316400051, 1.317000031, 1.316400051, 1.317100048, 1.316799998, 1.318300009, 1.317600012, 1.314299941, 1.314900041])

    absorbance = absorbance - absorbance_blanco

    absorbance_norm = absorbance / np.amax(absorbance)

    fig1, ax1 = plt.subplots(figsize=(12, 6), dpi=150)
    ax1.plot(wavelength, absorbance_norm, color="#9B0138")
    ax1.set_xlabel("Wavelength [nM]")
    ax1.set_ylabel("Absorbance")

    print(
        f"Wavelength maximum absorbance: {wavelength[np.argmax(absorbance_norm)]}")

    # ax1_ylim = ax1.get_ylim()
    # ax1.set_ylim((0, ax1_ylim[1]))

    ax1.xaxis.set_major_locator(MultipleLocator(50))
    ax1.xaxis.set_minor_locator(MultipleLocator(10))

    ax1.yaxis.set_major_locator(MultipleLocator(0.1))
    ax1.yaxis.set_minor_locator(MultipleLocator(0.01))

    if save_path is not None:
        fig1.savefig(f"{save_path}", format="svg", dpi=1200)
    else:
        plt.show()


def plot_absorbance_curves_hardware_plate(save_path: str = None):
    """Plots the absorbance against concentrations and makes a linear fit with the data points."""
    cpr_conc_hardware = np.array([0.25, 0.25, 0.25, 0.5, 0.5, 0.5,
                                  0.75, 0.75, 0.75, 1, 1, 1, 1.25, 1.25, 1.25])
    cpr_absorbance_hardware = np.array([0.29901, 0.24646, 0.27459, 0.62725, 0.577777, 0.67268067, 0.8091459787, 0.7160924046,
                                        0.6714569699, 0.9095247866, 0.9010765457, 0.9437113038, 1.0697792, 1.115627537, 1.18410570])

    cpr_conc_plate = np.array(
        [0.25, 0.25, 0.5, 0.5, 0.75, 0.75, 1, 1, 1.25, 1.25])
    cpr_absorbance_plate = np.array(
        [0.3045, 0.2613, 0.53305, 0.50545, 0.60035, 0.62765, 0.78615, 0.70985, 0.95405, 0.90065])

    # First all calculations
    def func(x, a, b):
        return a*x + b

    # wh = without
    def func_wh_offset(x, a):
        return a*x

    # Hardware calculations
    popt_func_hardware, pcov_func_hardware = curve_fit(
        func, cpr_conc_hardware, cpr_absorbance_hardware)
    popt_func_wh_offset_hardware, pcov_func_wh_offset_hardware = curve_fit(
        func_wh_offset, cpr_conc_hardware, cpr_absorbance_hardware)

    cpr_conc_hardware_line = np.arange(0.05,
                                       np.amax(cpr_conc_hardware)+0.1, step=0.05)

    cpr_absorbance_func_hardware = func(
        cpr_conc_hardware_line, popt_func_hardware[0], popt_func_hardware[1])

    cpr_absorbance_func_wh_offset_hardware = func_wh_offset(
        cpr_conc_hardware_line, popt_func_wh_offset_hardware[0])

    # Calculate R^2 func hardware
    residuals_func_hardware = cpr_absorbance_hardware - \
        func(cpr_conc_hardware, popt_func_hardware[0], popt_func_hardware[1])
    ss_res_func_hardware = np.sum(residuals_func_hardware**2)
    ss_tot_func_hardware = np.sum(
        (cpr_absorbance_hardware-np.mean(cpr_absorbance_hardware))**2)
    r_squared_func_hardware = 1 - (ss_res_func_hardware/ss_tot_func_hardware)

    # Calculate R^2 func_wh_offset hardware
    residuals_func_wh_offset_hardware = cpr_absorbance_hardware - \
        func_wh_offset(cpr_conc_hardware, popt_func_hardware[0])
    ss_res_func_wh_offset_hardware = np.sum(
        residuals_func_wh_offset_hardware**2)
    ss_tot_func_wh_offset_hardware = np.sum(
        (cpr_absorbance_hardware-np.mean(cpr_absorbance_hardware))**2)
    r_squared_func_wh_offset_hardware = 1 - \
        (ss_res_func_wh_offset_hardware/ss_tot_func_wh_offset_hardware)
    #
    #
    #
    #
    # Plate reader
    popt_func_plate, pcov_func_plate = curve_fit(
        func, cpr_conc_plate, cpr_absorbance_plate)
    popt_func_wh_offset_plate, pcov_func_wh_offset_plate = curve_fit(
        func_wh_offset, cpr_conc_plate, cpr_absorbance_plate)
    print(f"popt hardware: ", popt_func_hardware)
    print(f"popt spectr: ", popt_func_plate)

    cpr_conc_plate_line = np.arange(
        0.05, np.amax(cpr_conc_plate)+0.1, step=0.05)

    cpr_absorbance_func_plate = func(
        cpr_conc_plate_line, popt_func_plate[0], popt_func_plate[1])

    cpr_absorbance_func_wh_offset_plate = func_wh_offset(
        cpr_conc_plate_line, popt_func_wh_offset_plate[0])

    # Calculate R^2 func spectrophotometer
    residuals_func_plate = cpr_absorbance_plate - \
        func(cpr_conc_plate, popt_func_plate[0], popt_func_plate[1])
    ss_res_func_plate = np.sum(residuals_func_plate**2)
    ss_tot_func_plate = np.sum(
        (cpr_absorbance_plate-np.mean(cpr_absorbance_plate))**2)
    r_squared_func_plate = 1 - (ss_res_func_plate/ss_tot_func_plate)

    # Calculate R^2 func_wh_offset spectrophotometer
    residuals_func_wh_offset_plate = cpr_absorbance_plate - \
        func_wh_offset(cpr_conc_plate, popt_func_plate[0])
    ss_res_func_wh_offset_plate = np.sum(
        residuals_func_wh_offset_plate**2)
    ss_tot_func_wh_offset_plate = np.sum(
        (cpr_absorbance_plate-np.mean(cpr_absorbance_plate))**2)
    r_squared_func_wh_offset_plate = 1 - \
        (ss_res_func_wh_offset_plate/ss_tot_func_wh_offset_plate)

    print(
        f"R^2 func hardware: {r_squared_func_hardware}, R^2 func_wh_offset hardware: {r_squared_func_wh_offset_hardware}")
    print(
        f"R^2 func spectr: {r_squared_func_plate}, R^2 func_wh_offset spectr: {r_squared_func_wh_offset_plate}")

    fig1, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(12, 5), dpi=150)

    # Plate reader plotting
    ax1.scatter(cpr_conc_plate, cpr_absorbance_plate,
                color="#057D54", alpha=1.0, s=15)
    ax1.plot(cpr_conc_plate_line, cpr_absorbance_func_plate,
             color="#9B0138", label="best fit")  # "#000000"
    # ax2.plot(cpr_conc_plate_line,
    #          cpr_absorbance_func_wh_offset_plate, color="#FFCE3A", label="0 constrain")

    # Hardware plotting
    ax2.scatter(cpr_conc_hardware, cpr_absorbance_hardware,
                color="#057D54", alpha=1.0, s=15)
    ax2.plot(cpr_conc_hardware_line, cpr_absorbance_func_hardware,
             color="#9B0138", label="best fit")
    # ax1.plot(cpr_conc_hardware_line,
    #          cpr_absorbance_func_wh_offset_hardware, color="#FFCE3A", label="0 constrain")

    # First do proporties for hardware subplot since this has the highest y-limit
    ax2.set_xlabel("CPR concentration $[\mathrm{mM}]$")
    ax2.set_ylabel("Absorbance")

    ax2_xlim = ax2.get_xlim()
    ax2.set_xlim((0, ax2_xlim[1]))
    ax2_ylim = ax2.get_ylim()
    ax2.set_ylim((0, ax2_ylim[1]))

    ax2.xaxis.set_major_locator(MultipleLocator(0.2))
    ax2.xaxis.set_minor_locator(MultipleLocator(0.1))

    ax2.yaxis.set_major_locator(MultipleLocator(0.1))
    ax2.yaxis.set_minor_locator(MultipleLocator(0.05))

    # Proporties ax1
    ax1.set_xlabel("CPR concentration [mM]")
    ax1.set_ylabel("Absorbance")

    ax1.set_xlim((0, ax2_xlim[1]))
    ax1.set_ylim((0, ax2_ylim[1]))

    ax1.xaxis.set_major_locator(MultipleLocator(0.2))
    ax1.xaxis.set_minor_locator(MultipleLocator(0.1))

    ax1.yaxis.set_major_locator(MultipleLocator(0.1))
    ax1.yaxis.set_minor_locator(MultipleLocator(0.05))

    # Set the character labels
    ax1.text(-0.1, 1.05, "a", transform=ax1.transAxes,
             size=16, weight="bold")
    ax2.text(-0.1, 1.05, "b", transform=ax2.transAxes,
             size=16, weight="bold")

    if save_path is not None:
        fig1.savefig(f"{save_path}", format="svg", dpi=1200)
    else:
        plt.show()


if __name__ == "__main__":
    plot_ambient_light_different_conditions(
        "T--TUDelft--Hardware_Different_Light_Conditions.svg")
    # absorbance_spectrum_food_colorant()
    plot_absorbance_spectrum_cpr("T--TUDelft--CPR_Absorbance_Spectrum.svg")
    plot_absorbance_curves_hardware_plate(
        "T--TUDelft--CPR_Absorbance_Curves_Hardware_Plate.svg")
